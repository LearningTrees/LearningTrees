@model LearningTree.Models.ViewModel.TeachingRoomViewModel
@{
    ViewBag.Title = "Teaching Room";
    
}


@section willeng {
    <script type="text/javascript" src="../Scripts/Will/scripts/jquery.min.js"></script>

    <script type="text/javascript" src="../Scripts/Will/scripts/js.ext.js"></script>
    <script type="text/javascript" src="../Scripts/Will/scripts/js.ext.dom.js"></script>
    <script type="text/javascript" src="../Scripts/Will/engine/Module.js"></script>
    <script type="text/javascript" src="../Scripts/Will/engine/WacomInkEngine.js"></script>

    <script type="text/javascript" src="../Scripts/Will/scripts/willClient.js"></script>
}

<style>
    body {
        background-color: lightgrey;
        overflow-y: scroll;
        width: 100%;
    }

    #disdiv{
        overflow-y: scroll;
         height:300px;
    }
</style>

@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>


        $(function () {
            
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.teachingHub;
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message) {
                // Add the message to the page.
                //alert(message);
                $('#discussion').append('<li><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');
            };
            chat.client.receive = function (sender, data) {
                //console.log("chat client receive " + data);
                client.receive(sender, data);
            }

            chat.client.clearCanvas = function () {
                WILL.clearCanvas();
            }

            chat.client.updateUserlist = function (users) {
                console.log('users - ' + users);
                $('#userlist').empty();
                for (var i = 0; i < users.length; i++) {
                    console.log('users - ' + users[i]);
                    $('#userlist').append('<li>' + htmlEncode(users[i]) + '</li>');
                }
                    
            }

            // Get the user name and store it to prepend to messages.
           
            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#conn-id').val($.connection.hub.id);

                initWillModule(chat);
                $('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    chat.server.send($('#DisplayName').val(), $('#message').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });

                $('#clearbtn').click(function () {
                    chat.server.clear();
                });

            });


        });

        $('#clearmessage').click(function () {
            $('#discussion').empty();
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }


        function initWillModule(chat) {
            Module.InkDecoder.getStrokeBrush = function (paint, writer) {
                return WILL.brush;
            }

            WILL.init(600, 400, chat.server);


            //chat.client.receive = function (sender, data) {
            //    console.log("chat client receive " + data);
            //    client.receive(sender, data);
            //}

            Module.addPostScript();

        }

        

        function eraseBtnPressed() {
            WILL.setMode(2);
        }

        function drawBtnPressed() {
            WILL.setMode(1);
        }

        
    </script>
}

<body>
    @Html.HiddenFor(model => model.DisplayName)
    @Html.HiddenFor(model => model.UserId)
    @Html.Hidden("conn-id")
    
    
    <div id="win" class="container">
        
        <div class="row">
            <div class="col-lg-7">
                <canvas id="canvas" oncontextmenu="event.preventDefault();"></canvas>
            </div>
            <div class="col-lg-4">
                <div class="row">
                    Question: @Html.DisplayFor(model => model.DisplayQuestion)
                </div>

                <div class="row">
                    <input type="text" id="message" />
                    <input type="button" id="sendmessage" value="Send" />
                    <input type="button" id="clearmessage" value="Clear" />
                    <input type="hidden" id="displayname" />

                    <div id="disdiv">
                        <ul id="discussion"></ul>
                    </div>
                    
                </div>
                
            </div>
        </div>
        <div class="row">
            <div class="col-lg-2"><button id="clearbtn">Clear</button></div>
            <div class="col-lg-2"><button onclick="eraseBtnPressed()">Erase</button></div>
            <div class="col-lg-2"><button onclick="drawBtnPressed()">Draw</button></div>
        </div>
        
        <div>
            <h5>Users:</h5>
            <ul id="userlist"></ul>
            
        </div>
        
    </div>
</body>
